flush ruleset

include "/etc/nftables.d/settings.nft";
include "/etc/nftables.d/reload_domains.nft";
include "/etc/nftables.d/blacklist.nft";

#nft add rule t c tcp dport 80 ip daddr set numgen inc mod 2 map { 0 : 192.168.1.100, 1 : 192.168.1.101 }
table inet filter {
  chain input     {
    type filter hook prerouting priority -10
    policy drop

    # Allow established connections
    ct state vmap { established : accept, related : accept, invalid : drop } 

    iif lo accept
{% for appName, fileNames in filter_structure.items() %}
{% for fileName in fileNames %}
{% if fileName == "input.nft" %}
    jump {{ appName }}_input
{% endif %}
{% endfor %}
{% endfor %}

    jump jump_reject
  }

  chain forward   {
    type filter hook forward priority 0;

{% for appName, fileNames in filter_structure.items() %}
{% for fileName in fileNames %}
{% if fileName == "forward.nft" %}
    jump {{ appName }}_forward
{% endif %}
{% endfor %}
{% endfor %}
  }

  chain output    {
    type filter hook output priority 0;

    # Allow established connections
    ct state vmap { established : accept, related : accept, invalid : drop } 

    oif lo accept

{% for appName, fileNames in filter_structure.items() %}
{% for fileName in fileNames %}
{% if fileName == "output.nft" %}
    jump {{ appName }}_output
{% endif %}
{% endfor %}
{% endfor %}

    jump jump_reject
  }

  chain reject-monitor {
    meta nftrace set 1 log group 0 drop
  }

  chain jump_reject {
    # jump reject-monitor
    drop
  }

{% for appName, fileNames in filter_structure.items() %}
{% for fileName in fileNames %}
{% filter indent(width=4) %}
{% include "filter/" + appName + "/" + fileName %}


{% endfilter %}
{% endfor %}
{% endfor %}

}

table ip nft_nat    {
  chain prerouting        {
    type nat hook prerouting priority 0
  }
  chain postrouting       {
    type nat hook postrouting priority 100
    oif $WAN_INTERFACE masquerade persistent
  }
}